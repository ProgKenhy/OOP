from config import setup_debug_configuration, setup_release_configuration
from container import DIContainer
from interfaces import ILogger, IDataService, INotificationService


def demonstrate_di_container():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""

    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DEPENDENCY INJECTION –ö–û–ù–¢–ï–ô–ù–ï–†–ê\n")

    # ===== DEBUG –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DEBUG –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    debug_container = DIContainer()
    setup_debug_configuration(debug_container)

    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Singleton (Logger) ---")
    logger1 = debug_container.get_instance(ILogger)
    logger2 = debug_container.get_instance(ILogger)
    print(f"Singleton test: logger1 is logger2 = {logger1 is logger2}")

    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Scoped (DataService) ---")
    with debug_container.create_scope():
        data_service1 = debug_container.get_instance(IDataService)
        data_service2 = debug_container.get_instance(IDataService)
        print(f"Scoped test 1: data_service1 is data_service2 = {data_service1 is data_service2}")

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        data = data_service1.get_data()
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        data_service1.save_data("–Ω–æ–≤–∞—è_debug_–∑–∞–ø–∏—Å—å")

    with debug_container.create_scope():
        data_service3 = debug_container.get_instance(IDataService)
        print(f"Scoped test 2: data_service1 is data_service3 = {data_service1 is data_service3}")

    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PerRequest (NotificationService) ---")
    with debug_container.create_scope():
        notification1 = debug_container.get_instance(INotificationService)
        notification2 = debug_container.get_instance(INotificationService)
        print(f"PerRequest test: notification1 is notification2 = {notification1 is notification2}")

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification1.send_notification("user@example.com", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    # ===== RELEASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
    print("\n\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RELEASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    release_container = DIContainer()
    setup_release_configuration(release_container)

    print("\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (Logger) ---")
    logger3 = release_container.get_instance(ILogger)
    logger4 = release_container.get_instance(ILogger)
    print(f"Factory method Singleton test: logger3 is logger4 = {logger3 is logger4}")

    print("\n--- –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π ---")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    logger = release_container.get_instance(ILogger)
    data_service = release_container.get_instance(IDataService)
    notification_service = release_container.get_instance(INotificationService)

    # –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
    logger.log("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    current_data = data_service.get_data()
    logger.log(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {current_data}")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data_service.save_data("–Ω–æ–≤–∞—è_production_–∑–∞–ø–∏—Å—å")
    data_service.save_data("–µ—â–µ_–æ–¥–Ω–∞_–∑–∞–ø–∏—Å—å")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_service.send_notification("admin@company.com", "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    notification_service.send_notification("user@company.com", "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updated_data = data_service.get_data()
    logger.log(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {updated_data}")

    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    demonstrate_di_container()
